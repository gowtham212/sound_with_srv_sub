// Generated by gencpp from file sound_package/PlaySongRequest.msg
// DO NOT EDIT!


#ifndef SOUND_PACKAGE_MESSAGE_PLAYSONGREQUEST_H
#define SOUND_PACKAGE_MESSAGE_PLAYSONGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sound_package
{
template <class ContainerAllocator>
struct PlaySongRequest_
{
  typedef PlaySongRequest_<ContainerAllocator> Type;

  PlaySongRequest_()
    : song_name()  {
    }
  PlaySongRequest_(const ContainerAllocator& _alloc)
    : song_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _song_name_type;
  _song_name_type song_name;





  typedef boost::shared_ptr< ::sound_package::PlaySongRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sound_package::PlaySongRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlaySongRequest_

typedef ::sound_package::PlaySongRequest_<std::allocator<void> > PlaySongRequest;

typedef boost::shared_ptr< ::sound_package::PlaySongRequest > PlaySongRequestPtr;
typedef boost::shared_ptr< ::sound_package::PlaySongRequest const> PlaySongRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sound_package::PlaySongRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sound_package::PlaySongRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sound_package::PlaySongRequest_<ContainerAllocator1> & lhs, const ::sound_package::PlaySongRequest_<ContainerAllocator2> & rhs)
{
  return lhs.song_name == rhs.song_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sound_package::PlaySongRequest_<ContainerAllocator1> & lhs, const ::sound_package::PlaySongRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sound_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sound_package::PlaySongRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sound_package::PlaySongRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sound_package::PlaySongRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sound_package::PlaySongRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sound_package::PlaySongRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sound_package::PlaySongRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sound_package::PlaySongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "255f71252667ebf7fa55ca7b065dd180";
  }

  static const char* value(const ::sound_package::PlaySongRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x255f71252667ebf7ULL;
  static const uint64_t static_value2 = 0xfa55ca7b065dd180ULL;
};

template<class ContainerAllocator>
struct DataType< ::sound_package::PlaySongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sound_package/PlaySongRequest";
  }

  static const char* value(const ::sound_package::PlaySongRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sound_package::PlaySongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# PlaySong.srv\n"
"string song_name\n"
;
  }

  static const char* value(const ::sound_package::PlaySongRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sound_package::PlaySongRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.song_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlaySongRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sound_package::PlaySongRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sound_package::PlaySongRequest_<ContainerAllocator>& v)
  {
    s << indent << "song_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.song_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOUND_PACKAGE_MESSAGE_PLAYSONGREQUEST_H
