// Generated by gencpp from file sound_package/SetVolumeRequest.msg
// DO NOT EDIT!


#ifndef SOUND_PACKAGE_MESSAGE_SETVOLUMEREQUEST_H
#define SOUND_PACKAGE_MESSAGE_SETVOLUMEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sound_package
{
template <class ContainerAllocator>
struct SetVolumeRequest_
{
  typedef SetVolumeRequest_<ContainerAllocator> Type;

  SetVolumeRequest_()
    : volume(0)  {
    }
  SetVolumeRequest_(const ContainerAllocator& _alloc)
    : volume(0)  {
  (void)_alloc;
    }



   typedef int32_t _volume_type;
  _volume_type volume;





  typedef boost::shared_ptr< ::sound_package::SetVolumeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sound_package::SetVolumeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetVolumeRequest_

typedef ::sound_package::SetVolumeRequest_<std::allocator<void> > SetVolumeRequest;

typedef boost::shared_ptr< ::sound_package::SetVolumeRequest > SetVolumeRequestPtr;
typedef boost::shared_ptr< ::sound_package::SetVolumeRequest const> SetVolumeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sound_package::SetVolumeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sound_package::SetVolumeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sound_package::SetVolumeRequest_<ContainerAllocator1> & lhs, const ::sound_package::SetVolumeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.volume == rhs.volume;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sound_package::SetVolumeRequest_<ContainerAllocator1> & lhs, const ::sound_package::SetVolumeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sound_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sound_package::SetVolumeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sound_package::SetVolumeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sound_package::SetVolumeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sound_package::SetVolumeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sound_package::SetVolumeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sound_package::SetVolumeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sound_package::SetVolumeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1184583b1da0d952e5fa7c39166e86c";
  }

  static const char* value(const ::sound_package::SetVolumeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1184583b1da0d95ULL;
  static const uint64_t static_value2 = 0x2e5fa7c39166e86cULL;
};

template<class ContainerAllocator>
struct DataType< ::sound_package::SetVolumeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sound_package/SetVolumeRequest";
  }

  static const char* value(const ::sound_package::SetVolumeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sound_package::SetVolumeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request message format\n"
"int32 volume  # Desired volume level (0-100)\n"
"\n"
"# Response message format\n"
;
  }

  static const char* value(const ::sound_package::SetVolumeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sound_package::SetVolumeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.volume);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetVolumeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sound_package::SetVolumeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sound_package::SetVolumeRequest_<ContainerAllocator>& v)
  {
    s << indent << "volume: ";
    Printer<int32_t>::stream(s, indent + "  ", v.volume);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOUND_PACKAGE_MESSAGE_SETVOLUMEREQUEST_H
